I'm confused, lets start from beginning. for now I've done initial setups and installed all required modules. 

Please Note the following should be the objective for the project

1) We will use MongoDB Atlas database for storing our Users and Blogs Collections
2) The Front End should use Material UI Theme
3) The Blog Editor should be in markdown style and So use react-markdown and use any available markdown toolbars
4) The Markdown Editor should contain live Preview
5) The authentication part should contain OAuth and JWT
6) Use Cookies in necessary places
7) The Home page should be a beautiful article page which is Displayed in a Material UI with Blog Categories
8) Provide users access to Login and Register to be a Author and Users
9) The Users should be only able to View the Article Pages.
10) Authors can be able to Create, Delete, Edit and Update their Respective Blogs. Not the blogs created by ohers
11) The Blogs can Contain media files like Image and Video Hosted form cloudinary.
12) Make the UI Responsive and Give a Mobile First approach, Should also look beautiful in Desktop Browser
13) Provide all backend Codes in Folder backend

You tell me what to do step by step and also provide complete specific code implementation for each file one by one.

package.json

{
  "name": "inkflow2.0",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.0",
    "@emotion/styled": "^11.11.0",
    "@mui/material": "^5.13.3",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.4.0",
    "bcrypt": "^5.1.0",
    "cloudinary": "^1.37.0",
    "cloudinary-react": "^1.8.1",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.1.3",
    "express": "^4.18.2",
    "mongodb": "^5.5.0",
    "mongoose": "^7.2.2",
    "multer": "^1.4.5-lts.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^8.0.7",
    "react-router-dom": "^6.11.2",
    "react-scripts": "5.0.1",
    "react-simplemde-editor": "^5.2.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "devStart": "nodemon backend/server.js"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}


.env
MONGODB_USERNAME = AlphaDBAdmin2
MONGODB_PASSWORD = Zoo05rF9PMR3UeGG
MONGODB_DATABASE = InkFlow
SERVER_PORT = 6060
CLOUDINARY_CLOUD_NAME=dq89fwi3s
CLOUDINARY_API_KEY=164665171198367
CLOUDINARY_API_SECRET=zkJdNrgHukbnppn5mME1KQnAkLU

require('dotenv').config();
const mongoose = require('mongoose');

const { MONGODB_USERNAME, MONGODB_PASSWORD, MONGODB_DATABASE } = process.env;

// MongoDB Atlas connection URI
const uri = `mongodb+srv://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@alphadbv1.9q93m.mongodb.net/${MONGODB_DATABASE}?retryWrites=true&w=majority`;

const connectDB = async () => {
  try {
    await mongoose.connect(uri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    console.log('Connected to MongoDB Atlas');
  } catch (error) {
    console.error('Error connecting to MongoDB Atlas:', error);
    process.exit(1);
  }
};

module.exports = connectDB;